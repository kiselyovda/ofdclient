from datetime import datetime

from pydantic import BaseModel, Field, HttpUrl

__all__ = ['Info', 'KktList']


class Info(BaseModel):
    id: str = Field(alias='Id', description='Unique id number')
    kkt_reg_id: str = Field(alias='KktRegId', description='Registration number')
    kkt_name: str = Field(alias='KktName', description='Name')
    serial_number: str = Field(alias='SerialNumber', description='Serial number')
    activation_date: datetime = Field(
        alias='ActivationDate',
        description='Activation datetime'
    )
    contract_date: datetime = Field(
        alias='ContractStartDate',
        description=(
            'Date of successful verification of registration number'
            'with the Federal Tax Service'
        )
    )
    contract_end_date: datetime = Field(
        alias='ContractEndDate',
        description='Contract start date for "OFD.ru" services'
    )
    create_date: datetime = Field(
        alias='CreateDate',
        description='Date of checkout registration in the customer\'s personal office'
    )
    fn_number: str = Field(alias='FnNumber', description='Fiscal recorder number')
    sign_date: datetime = Field(
        alias='SignDate', description='Date of contract signature'
    )
    payment_date: datetime = Field(
        alias='PaymentDate',
        description='Date of payment of the OFD services for the cash register'
    )
    check_date: datetime = Field(
        alias='CheckDate',
        description='Date of signature by qualified electronic signature'
    )
    last_doc_on_kkt_datetime: datetime = Field(
        alias='LastDocOnKktDateTime',
        description=('Date and time of the last document '
                     'generated by the cash register'
                     )
    )
    last_doc_on_ofd_datetime_utc: datetime = Field(
        alias='LastDocOnOfdDateTimeUtc',
        description=(
            'Date and time of the last document received by the cash register'
            'at the OFD (according to "OFD.ru" operator\'s time in UTC)'
        )
    )
    first_document_date: datetime = Field(
        alias='FirstDocumentDate',
        description=(
            'Date and time when the cash register generates the first document'
        )
    )
    fiscal_address: HttpUrl = Field(
        alias='FiscalAddress',
        description='Cash register installation address'
    )
    fiscal_place: HttpUrl = Field(
        alias='FiscalPlace',
        description='Place of settlement'
    )
    path: str = Field(
        alias='Path',
        description='Hierarchy of checkout locations in the customer\'s personal area'
    )
    kkt_model: str = Field(alias='KktModel', description='Cash register model')
    fn_end_date: datetime = Field(alias='FnEndDate', description='Date and time when the fiscal drive expires')

    class Config:
        allow_population_by_field_name = True


class KktList(BaseModel):
    id: str = Field(alias='Id')
    kkk_reg_id: str = Field(alias='KktRegId')
    kkt_name: str = Field(alias='KktName')
    serial_number: str = Field(alias='SerialNumber')
    fn_number: int = Field(alias='FnNumber')
    inn: str = Field(alias='INN')
    group_id: str = Field(alias='GroupId')
    create_date: datetime = Field(alias='CreateDate')
    check_date: datetime = Field(alias='CheckDate')
    activation_date: datetime = Field(alias='ActivationDate')
    first_document_date: datetime = Field(alias='FirstDocumentDate')
    contract_start_date: datetime = Field(alias='ContractStartDate')
    last_doc_on_kkt_date_time: datetime = Field(alias='LastDocOnKktDateTime')
    last_doc_on_ofd_date_time_utc: datetime = Field(alias='LastDocOnOfdDateTimeUtc')
    fiscal_address: str = Field(alias='FiscalAddress')
    fiscal_place: str = Field(alias='FiscalPlace')
    path: str = Field(alias='Path')
    kkt_model: str = Field(alias='KktModel')
    fn_end_date: datetime = Field(alias='FnEndDate')

    class Config:
        by_alias = True